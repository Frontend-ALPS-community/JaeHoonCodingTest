const arr = [1, 2, 3, 4, 5];

for (const element of arr) {
  console.log(element); // 배열의 각 요소 출력
}
 배열, 문자열, Map, Set, NodeList 등의 객체를 순회
 장점은 반복 가능한 객체의 요소를 직접 접근하므로 인덱스를 사용할 필요가 없음




const arr = [1, 2, 3, 4, 5];

arr.forEach(element => {
  console.log(element); // 배열의 각 요소 출력
});

const person = {
  name: 'John',
  age: 30,
  gender: 'male',
};

for (const key in person) {
  console.log(key, person[key]); // 객체의 속성과 값을 출력
}

reduce


데이터 맵 돌려서 뿌릴때 map / forEach 차이 ? 
forEach 각 요소에대한 작업만 수행 새로운 배열 반환 x

forEach: 이것은 목록을 반복하고
각 목록 구성원에 부작용이 있는 일부 작업을 적용하고(예: 모든 목록 항목을 데이터베이스에 저장) 아무것도 반환하지 않습니다.
배열 요소당 한 번씩 제공된 함수를 실행

map: 목록을 반복하고, 해당 목록의 각 구성원을 변환하고, 변환된 구성원과 동일한 크기의 다른 목록을 반환합니다
(예: 문자열 목록을 대문자로 변환). 호출된 배열을 변경하지 않습니다(콜백 함수가 그렇게 할 수도 있음).
 배열의 모든 요소에 대해 제공된 함수를 호출한 결과로 새 배열을 만듭니다

 아무런 목적 없이 반환 값을 수집하지 않아야 합니다. 필요하지 않으면 수집하지 않는 것이 더 효율적